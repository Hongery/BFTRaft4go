// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/bftraft.proto

/*
Package bftraft is a generated protocol buffer package.

It is generated from these files:
	proto/bftraft.proto

It has these top-level messages:
	CommandRequest
	CommandResponse
	LogEntry
	RequestVoteRequest
	RequestVoteResponse
	AppendEntriesRequest
	AppendEntriesResponse
*/
package bftraft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommandRequest struct {
	Group     int64  `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	ClientId  int64  `protobuf:"varint,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	RequestId int64  `protobuf:"varint,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	Data      []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CommandRequest) Reset()                    { *m = CommandRequest{} }
func (m *CommandRequest) String() string            { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()               {}
func (*CommandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommandRequest) GetGroup() int64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *CommandRequest) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *CommandRequest) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CommandRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *CommandRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CommandResponse struct {
	Group     int64  `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	LeaderId  int32  `protobuf:"varint,2,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	NodeId    int32  `protobuf:"varint,3,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	RequestId int64  `protobuf:"varint,4,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Result    []byte `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *CommandResponse) Reset()                    { *m = CommandResponse{} }
func (m *CommandResponse) String() string            { return proto.CompactTextString(m) }
func (*CommandResponse) ProtoMessage()               {}
func (*CommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommandResponse) GetGroup() int64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *CommandResponse) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *CommandResponse) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *CommandResponse) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CommandResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *CommandResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type LogEntry struct {
	Term    int64           `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Hash    []byte          `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Command *CommandRequest `protobuf:"bytes,3,opt,name=command" json:"command,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LogEntry) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *LogEntry) GetCommand() *CommandRequest {
	if m != nil {
		return m.Command
	}
	return nil
}

type RequestVoteRequest struct {
	Group       int64  `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Term        int64  `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	LogIndex    int64  `protobuf:"varint,3,opt,name=log_index,json=logIndex" json:"log_index,omitempty"`
	LogTerm     int64  `protobuf:"varint,4,opt,name=log_term,json=logTerm" json:"log_term,omitempty"`
	CandidateId int32  `protobuf:"varint,5,opt,name=candidate_id,json=candidateId" json:"candidate_id,omitempty"`
	Signature   []byte `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RequestVoteRequest) GetGroup() int64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *RequestVoteRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteRequest) GetLogIndex() int64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

func (m *RequestVoteRequest) GetLogTerm() int64 {
	if m != nil {
		return m.LogTerm
	}
	return 0
}

func (m *RequestVoteRequest) GetCandidateId() int32 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *RequestVoteRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type RequestVoteResponse struct {
	Group       int64  `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Term        int64  `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	NodeId      int32  `protobuf:"varint,3,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	CandidateId int32  `protobuf:"varint,4,opt,name=candidate_id,json=candidateId" json:"candidate_id,omitempty"`
	Granted     bool   `protobuf:"varint,5,opt,name=granted" json:"granted,omitempty"`
	Signature   []byte `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RequestVoteResponse) GetGroup() int64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *RequestVoteResponse) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteResponse) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *RequestVoteResponse) GetCandidateId() int32 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *RequestVoteResponse) GetGranted() bool {
	if m != nil {
		return m.Granted
	}
	return false
}

func (m *RequestVoteResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type AppendEntriesRequest struct {
	Group        int64                  `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Term         int64                  `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	LeaderId     int64                  `protobuf:"varint,3,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	PrevLogIndex int64                  `protobuf:"varint,4,opt,name=prev_log_index,json=prevLogIndex" json:"prev_log_index,omitempty"`
	PrevLogTerm  int64                  `protobuf:"varint,5,opt,name=prev_log_term,json=prevLogTerm" json:"prev_log_term,omitempty"`
	Signature    []byte                 `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	QuorumVotes  []*RequestVoteResponse `protobuf:"bytes,7,rep,name=quorum_votes,json=quorumVotes" json:"quorum_votes,omitempty"`
	Entries      []*LogEntry            `protobuf:"bytes,8,rep,name=entries" json:"entries,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AppendEntriesRequest) GetGroup() int64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *AppendEntriesRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderId() int64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogIndex() int64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogTerm() int64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *AppendEntriesRequest) GetQuorumVotes() []*RequestVoteResponse {
	if m != nil {
		return m.QuorumVotes
	}
	return nil
}

func (m *AppendEntriesRequest) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AppendEntriesResponse struct {
	Group     int64  `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Term      int64  `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	Index     int64  `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	NodeId    int32  `protobuf:"varint,4,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Successed bool   `protobuf:"varint,5,opt,name=successed" json:"successed,omitempty"`
	Convinced bool   `protobuf:"varint,6,opt,name=convinced" json:"convinced,omitempty"`
	Hash      []byte `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
	Signature []byte `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AppendEntriesResponse) GetGroup() int64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *AppendEntriesResponse) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *AppendEntriesResponse) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

func (m *AppendEntriesResponse) GetConvinced() bool {
	if m != nil {
		return m.Convinced
	}
	return false
}

func (m *AppendEntriesResponse) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *AppendEntriesResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*CommandRequest)(nil), "bftraft.CommandRequest")
	proto.RegisterType((*CommandResponse)(nil), "bftraft.CommandResponse")
	proto.RegisterType((*LogEntry)(nil), "bftraft.LogEntry")
	proto.RegisterType((*RequestVoteRequest)(nil), "bftraft.RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "bftraft.RequestVoteResponse")
	proto.RegisterType((*AppendEntriesRequest)(nil), "bftraft.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesResponse)(nil), "bftraft.AppendEntriesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BFTRaft service

type BFTRaftClient interface {
	ExecCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
}

type bFTRaftClient struct {
	cc *grpc.ClientConn
}

func NewBFTRaftClient(cc *grpc.ClientConn) BFTRaftClient {
	return &bFTRaftClient{cc}
}

func (c *bFTRaftClient) ExecCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := grpc.Invoke(ctx, "/bftraft.BFTRaft/ExecCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFTRaftClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := grpc.Invoke(ctx, "/bftraft.BFTRaft/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFTRaftClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := grpc.Invoke(ctx, "/bftraft.BFTRaft/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BFTRaft service

type BFTRaftServer interface {
	ExecCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
}

func RegisterBFTRaftServer(s *grpc.Server, srv BFTRaftServer) {
	s.RegisterService(&_BFTRaft_serviceDesc, srv)
}

func _BFTRaft_ExecCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTRaftServer).ExecCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bftraft.BFTRaft/ExecCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTRaftServer).ExecCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFTRaft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTRaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bftraft.BFTRaft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTRaftServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFTRaft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTRaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bftraft.BFTRaft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTRaftServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BFTRaft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bftraft.BFTRaft",
	HandlerType: (*BFTRaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecCommand",
			Handler:    _BFTRaft_ExecCommand_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _BFTRaft_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _BFTRaft_AppendEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bftraft.proto",
}

func init() { proto.RegisterFile("proto/bftraft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x5e, 0xb6, 0xa6, 0xc9, 0x4e, 0xba, 0x21, 0xbc, 0xc2, 0xc2, 0x7e, 0x50, 0x89, 0xb8, 0xa8,
	0x84, 0x34, 0x44, 0x79, 0x00, 0xc4, 0xd0, 0x90, 0x8a, 0x76, 0x81, 0xac, 0x89, 0xdb, 0x2a, 0x8b,
	0xdd, 0x2c, 0x52, 0x6b, 0x67, 0x8e, 0x53, 0x8d, 0xf7, 0xe0, 0x49, 0xe0, 0x82, 0xb7, 0xe1, 0x05,
	0x78, 0x09, 0x64, 0x3b, 0x4e, 0xdb, 0xf4, 0x07, 0xc1, 0x9d, 0xcf, 0x77, 0xce, 0x89, 0x3e, 0x7f,
	0xdf, 0x67, 0x05, 0x8e, 0x72, 0xc1, 0x25, 0x7f, 0x7d, 0x3b, 0x96, 0x22, 0x1e, 0xcb, 0x0b, 0x5d,
	0x21, 0xaf, 0x2a, 0xa3, 0x6f, 0x0e, 0x1c, 0x7e, 0xe0, 0xd3, 0x69, 0xcc, 0x08, 0xa6, 0xf7, 0x25,
	0x2d, 0x24, 0xea, 0x82, 0x9b, 0x0a, 0x5e, 0xe6, 0xa1, 0xd3, 0x73, 0xfa, 0x7b, 0xd8, 0x14, 0xe8,
	0x14, 0xf6, 0x93, 0x49, 0x46, 0x99, 0x1c, 0x65, 0x24, 0xdc, 0xd5, 0x1d, 0xdf, 0x00, 0x43, 0x82,
	0xce, 0x01, 0x84, 0xd9, 0x56, 0xdd, 0x3d, 0xdd, 0xdd, 0xaf, 0x90, 0x21, 0x41, 0x67, 0xb0, 0x5f,
	0x64, 0x29, 0x8b, 0x65, 0x29, 0x68, 0xd8, 0xea, 0x39, 0xfd, 0x0e, 0x9e, 0x03, 0x08, 0x41, 0x8b,
	0xc4, 0x32, 0x0e, 0x5d, 0xdd, 0xd0, 0xe7, 0xe8, 0xbb, 0x03, 0x8f, 0x6a, 0x5a, 0x45, 0xce, 0x59,
	0x41, 0x37, 0xf3, 0x9a, 0xd0, 0x98, 0x50, 0x61, 0x79, 0xb9, 0xd8, 0x37, 0xc0, 0x90, 0xa0, 0x63,
	0xf0, 0x18, 0x27, 0xd4, 0x92, 0x72, 0x71, 0x5b, 0x95, 0x2b, 0x84, 0x5b, 0x5b, 0x09, 0xbb, 0x4d,
	0xc2, 0x4f, 0xa1, 0x2d, 0x68, 0x51, 0x4e, 0x64, 0xd8, 0xd6, 0xad, 0xaa, 0x8a, 0x28, 0xf8, 0xd7,
	0x3c, 0xbd, 0x62, 0x52, 0x7c, 0x55, 0x97, 0x92, 0x54, 0x4c, 0x2b, 0xae, 0xfa, 0xac, 0xb0, 0xbb,
	0xb8, 0xb8, 0xd3, 0x2c, 0x3b, 0x58, 0x9f, 0xd1, 0x1b, 0xf0, 0x12, 0x73, 0x4f, 0xcd, 0x30, 0x18,
	0x1c, 0x5f, 0x58, 0xa7, 0x96, 0x6d, 0xc1, 0x76, 0x2e, 0xfa, 0xe9, 0x00, 0xaa, 0xc0, 0x2f, 0x5c,
	0xd2, 0xed, 0xb6, 0x59, 0x1e, 0xbb, 0x0b, 0x3c, 0x94, 0x64, 0x3c, 0x1d, 0x65, 0x8c, 0xd0, 0x87,
	0xca, 0x2c, 0x7f, 0xc2, 0xd3, 0xa1, 0xaa, 0xd1, 0x33, 0x50, 0xe7, 0x91, 0x5e, 0x32, 0xba, 0x78,
	0x13, 0x9e, 0xde, 0xa8, 0xbd, 0x17, 0xd0, 0x49, 0x62, 0x46, 0x32, 0x12, 0x4b, 0x2d, 0xa9, 0xab,
	0x25, 0x0d, 0x6a, 0xac, 0x29, 0x5c, 0xbb, 0x21, 0x5c, 0xf4, 0xc3, 0x81, 0xa3, 0x25, 0xe6, 0x5b,
	0x9d, 0x5d, 0x47, 0x7d, 0xa3, 0xa1, 0x4d, 0x6e, 0xad, 0x55, 0x6e, 0x21, 0x78, 0xa9, 0x88, 0x99,
	0xa4, 0x86, 0xb9, 0x8f, 0x6d, 0xf9, 0x37, 0xd6, 0xbb, 0xd0, 0x7d, 0x9f, 0xe7, 0x94, 0x11, 0x65,
	0x6d, 0x46, 0x8b, 0xff, 0x53, 0xbc, 0x0e, 0xa9, 0x55, 0xdc, 0x86, 0xf4, 0x25, 0x1c, 0xe6, 0x82,
	0xce, 0x46, 0x73, 0x4f, 0x8c, 0xee, 0x1d, 0x85, 0x5e, 0x5b, 0x5f, 0x22, 0x38, 0xa8, 0xa7, 0xf4,
	0xf7, 0x5d, 0x3d, 0x14, 0x54, 0x43, 0xda, 0xa0, 0xad, 0xf7, 0x40, 0xef, 0xa0, 0x73, 0x5f, 0x72,
	0x51, 0x4e, 0x47, 0x33, 0x2e, 0x69, 0x11, 0x7a, 0xbd, 0xbd, 0x7e, 0x30, 0x38, 0xab, 0xf3, 0xb6,
	0xc6, 0x19, 0x1c, 0x98, 0x0d, 0x85, 0x15, 0xe8, 0x15, 0x78, 0xd4, 0x28, 0x10, 0xfa, 0x7a, 0xf7,
	0x71, 0xbd, 0x6b, 0x73, 0x8f, 0xed, 0x44, 0xf4, 0xcb, 0x81, 0x27, 0x0d, 0xd5, 0xfe, 0xd9, 0xed,
	0x2e, 0xb8, 0x8b, 0x21, 0x35, 0xc5, 0x62, 0x06, 0x5a, 0x4b, 0x19, 0x50, 0xd7, 0x2f, 0x93, 0x84,
	0x16, 0x45, 0x6d, 0xf1, 0x1c, 0x50, 0xdd, 0x84, 0xb3, 0x59, 0xc6, 0x12, 0x4a, 0xb4, 0x38, 0x3e,
	0x9e, 0x03, 0xf5, 0xdb, 0xf4, 0x16, 0xde, 0xe6, 0x92, 0x9c, 0x7e, 0x43, 0xce, 0xc1, 0x6f, 0x07,
	0xbc, 0xcb, 0x8f, 0x37, 0x38, 0x1e, 0x4b, 0x74, 0x09, 0xc1, 0xd5, 0x03, 0x4d, 0xaa, 0x17, 0x8b,
	0x36, 0xbd, 0xe1, 0x93, 0x70, 0xb5, 0x61, 0x44, 0x89, 0x76, 0xd0, 0x27, 0x08, 0x16, 0x1c, 0x40,
	0xa7, 0xeb, 0x7d, 0x31, 0xdf, 0xd9, 0x6a, 0x5a, 0xb4, 0x83, 0x3e, 0xc3, 0xc1, 0x92, 0xf6, 0xe8,
	0xbc, 0x5e, 0x58, 0x97, 0xe4, 0x93, 0xe7, 0x9b, 0xda, 0xf6, 0x8b, 0xb7, 0x6d, 0xfd, 0xdf, 0x78,
	0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0x07, 0x5f, 0x63, 0xf5, 0x4e, 0x06, 0x00, 0x00,
}
