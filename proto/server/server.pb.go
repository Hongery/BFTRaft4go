// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/server/server.proto

/*
Package server is a generated protocol buffer package.

It is generated from these files:
	proto/server/server.proto

It has these top-level messages:
	CommandRequest
	CommandResponse
	LogEntry
	RequestVoteRequest
	RequestVoteResponse
	AppendEntriesRequest
	AppendEntriesResponse
	Peer
	Host
	RaftGroup
	ServerConfig
	ApproveAppendResponse
	GroupId
	GroupNodesResponse
	GroupMember
	GroupMembersResponse
	PullGroupLogsResuest
	LogEntries
	NodeJoinGroupEntry
	GroupLeader
	GroupInvitation
	RaftGroupNodes
	Nothing
*/
package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommandRequest struct {
	Group     uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	ClientId  uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	RequestId uint64 `protobuf:"varint,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	FuncId    uint64 `protobuf:"varint,4,opt,name=func_id,json=funcId" json:"func_id,omitempty"`
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Arg       []byte `protobuf:"bytes,6,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (m *CommandRequest) Reset()                    { *m = CommandRequest{} }
func (m *CommandRequest) String() string            { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()               {}
func (*CommandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommandRequest) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *CommandRequest) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *CommandRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CommandRequest) GetFuncId() uint64 {
	if m != nil {
		return m.FuncId
	}
	return 0
}

func (m *CommandRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *CommandRequest) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

type CommandResponse struct {
	Group     uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	LeaderId  uint64 `protobuf:"varint,2,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	NodeId    uint64 `protobuf:"varint,3,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	RequestId uint64 `protobuf:"varint,4,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Result    []byte `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *CommandResponse) Reset()                    { *m = CommandResponse{} }
func (m *CommandResponse) String() string            { return proto.CompactTextString(m) }
func (*CommandResponse) ProtoMessage()               {}
func (*CommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommandResponse) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *CommandResponse) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *CommandResponse) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *CommandResponse) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CommandResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *CommandResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type LogEntry struct {
	Term    uint64          `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Index   uint64          `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Hash    []byte          `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Command *CommandRequest `protobuf:"bytes,4,opt,name=command" json:"command,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LogEntry) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogEntry) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *LogEntry) GetCommand() *CommandRequest {
	if m != nil {
		return m.Command
	}
	return nil
}

type RequestVoteRequest struct {
	Group       uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Term        uint64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	LogIndex    uint64 `protobuf:"varint,3,opt,name=log_index,json=logIndex" json:"log_index,omitempty"`
	LogTerm     uint64 `protobuf:"varint,4,opt,name=log_term,json=logTerm" json:"log_term,omitempty"`
	CandidateId uint64 `protobuf:"varint,5,opt,name=candidate_id,json=candidateId" json:"candidate_id,omitempty"`
	Signature   []byte `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RequestVoteRequest) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *RequestVoteRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteRequest) GetLogIndex() uint64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

func (m *RequestVoteRequest) GetLogTerm() uint64 {
	if m != nil {
		return m.LogTerm
	}
	return 0
}

func (m *RequestVoteRequest) GetCandidateId() uint64 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *RequestVoteRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type RequestVoteResponse struct {
	Group       uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Term        uint64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	LogIndex    uint64 `protobuf:"varint,3,opt,name=log_index,json=logIndex" json:"log_index,omitempty"`
	CandidateId uint64 `protobuf:"varint,5,opt,name=candidate_id,json=candidateId" json:"candidate_id,omitempty"`
	Voter       uint64 `protobuf:"varint,6,opt,name=voter" json:"voter,omitempty"`
	Granted     bool   `protobuf:"varint,7,opt,name=granted" json:"granted,omitempty"`
	Signature   []byte `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RequestVoteResponse) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *RequestVoteResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteResponse) GetLogIndex() uint64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

func (m *RequestVoteResponse) GetCandidateId() uint64 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *RequestVoteResponse) GetVoter() uint64 {
	if m != nil {
		return m.Voter
	}
	return 0
}

func (m *RequestVoteResponse) GetGranted() bool {
	if m != nil {
		return m.Granted
	}
	return false
}

func (m *RequestVoteResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type AppendEntriesRequest struct {
	Group        uint64                 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Term         uint64                 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	LeaderId     uint64                 `protobuf:"varint,3,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	PrevLogIndex uint64                 `protobuf:"varint,4,opt,name=prev_log_index,json=prevLogIndex" json:"prev_log_index,omitempty"`
	PrevLogTerm  uint64                 `protobuf:"varint,5,opt,name=prev_log_term,json=prevLogTerm" json:"prev_log_term,omitempty"`
	Signature    []byte                 `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	QuorumVotes  []*RequestVoteResponse `protobuf:"bytes,7,rep,name=quorum_votes,json=quorumVotes" json:"quorum_votes,omitempty"`
	Entries      []*LogEntry            `protobuf:"bytes,8,rep,name=entries" json:"entries,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AppendEntriesRequest) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *AppendEntriesRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogIndex() uint64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogTerm() uint64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *AppendEntriesRequest) GetQuorumVotes() []*RequestVoteResponse {
	if m != nil {
		return m.QuorumVotes
	}
	return nil
}

func (m *AppendEntriesRequest) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AppendEntriesResponse struct {
	Group     uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Term      uint64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	Index     uint64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Peer      uint64 `protobuf:"varint,4,opt,name=peer" json:"peer,omitempty"`
	Successed bool   `protobuf:"varint,5,opt,name=successed" json:"successed,omitempty"`
	Convinced bool   `protobuf:"varint,6,opt,name=convinced" json:"convinced,omitempty"`
	Hash      []byte `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
	Signature []byte `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AppendEntriesResponse) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *AppendEntriesResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *AppendEntriesResponse) GetPeer() uint64 {
	if m != nil {
		return m.Peer
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

func (m *AppendEntriesResponse) GetConvinced() bool {
	if m != nil {
		return m.Convinced
	}
	return false
}

func (m *AppendEntriesResponse) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *AppendEntriesResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Peer struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Group      uint64 `protobuf:"varint,2,opt,name=group" json:"group,omitempty"`
	Host       uint64 `protobuf:"varint,3,opt,name=host" json:"host,omitempty"`
	NextIndex  uint64 `protobuf:"varint,4,opt,name=next_index,json=nextIndex" json:"next_index,omitempty"`
	MatchIndex uint64 `protobuf:"varint,5,opt,name=match_index,json=matchIndex" json:"match_index,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Peer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Peer) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *Peer) GetHost() uint64 {
	if m != nil {
		return m.Host
	}
	return 0
}

func (m *Peer) GetNextIndex() uint64 {
	if m != nil {
		return m.NextIndex
	}
	return 0
}

func (m *Peer) GetMatchIndex() uint64 {
	if m != nil {
		return m.MatchIndex
	}
	return 0
}

type Host struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	LastSeen   uint64 `protobuf:"varint,2,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty"`
	Online     bool   `protobuf:"varint,3,opt,name=online" json:"online,omitempty"`
	ServerAddr string `protobuf:"bytes,4,opt,name=server_addr,json=serverAddr" json:"server_addr,omitempty"`
	PublicKey  []byte `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *Host) Reset()                    { *m = Host{} }
func (m *Host) String() string            { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()               {}
func (*Host) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Host) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Host) GetLastSeen() uint64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func (m *Host) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

func (m *Host) GetServerAddr() string {
	if m != nil {
		return m.ServerAddr
	}
	return ""
}

func (m *Host) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type RaftGroup struct {
	Replications uint32 `protobuf:"varint,1,opt,name=replications" json:"replications,omitempty"`
	Id           uint64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Term         uint64 `protobuf:"varint,4,opt,name=term" json:"term,omitempty"`
}

func (m *RaftGroup) Reset()                    { *m = RaftGroup{} }
func (m *RaftGroup) String() string            { return proto.CompactTextString(m) }
func (*RaftGroup) ProtoMessage()               {}
func (*RaftGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RaftGroup) GetReplications() uint32 {
	if m != nil {
		return m.Replications
	}
	return 0
}

func (m *RaftGroup) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RaftGroup) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

type ServerConfig struct {
	PrivateKey []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (m *ServerConfig) Reset()                    { *m = ServerConfig{} }
func (m *ServerConfig) String() string            { return proto.CompactTextString(m) }
func (*ServerConfig) ProtoMessage()               {}
func (*ServerConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ServerConfig) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

type ApproveAppendResponse struct {
	Group     uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Peer      uint64 `protobuf:"varint,2,opt,name=peer" json:"peer,omitempty"`
	Index     uint64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Appended  bool   `protobuf:"varint,4,opt,name=appended" json:"appended,omitempty"`
	Delayed   bool   `protobuf:"varint,5,opt,name=delayed" json:"delayed,omitempty"`
	Failed    bool   `protobuf:"varint,6,opt,name=failed" json:"failed,omitempty"`
	Signature []byte `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *ApproveAppendResponse) Reset()                    { *m = ApproveAppendResponse{} }
func (m *ApproveAppendResponse) String() string            { return proto.CompactTextString(m) }
func (*ApproveAppendResponse) ProtoMessage()               {}
func (*ApproveAppendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ApproveAppendResponse) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *ApproveAppendResponse) GetPeer() uint64 {
	if m != nil {
		return m.Peer
	}
	return 0
}

func (m *ApproveAppendResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ApproveAppendResponse) GetAppended() bool {
	if m != nil {
		return m.Appended
	}
	return false
}

func (m *ApproveAppendResponse) GetDelayed() bool {
	if m != nil {
		return m.Delayed
	}
	return false
}

func (m *ApproveAppendResponse) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *ApproveAppendResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type GroupId struct {
	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *GroupId) Reset()                    { *m = GroupId{} }
func (m *GroupId) String() string            { return proto.CompactTextString(m) }
func (*GroupId) ProtoMessage()               {}
func (*GroupId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GroupId) GetGroupId() uint64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type GroupNodesResponse struct {
	Nodes     []*Host `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	Signature []byte  `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *GroupNodesResponse) Reset()                    { *m = GroupNodesResponse{} }
func (m *GroupNodesResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupNodesResponse) ProtoMessage()               {}
func (*GroupNodesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GroupNodesResponse) GetNodes() []*Host {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *GroupNodesResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type GroupMember struct {
	Host *Host `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Peer *Peer `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
}

func (m *GroupMember) Reset()                    { *m = GroupMember{} }
func (m *GroupMember) String() string            { return proto.CompactTextString(m) }
func (*GroupMember) ProtoMessage()               {}
func (*GroupMember) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GroupMember) GetHost() *Host {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *GroupMember) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type GroupMembersResponse struct {
	LastEntry *LogEntry      `protobuf:"bytes,2,opt,name=last_entry,json=lastEntry" json:"last_entry,omitempty"`
	Members   []*GroupMember `protobuf:"bytes,3,rep,name=members" json:"members,omitempty"`
	Signature []byte         `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *GroupMembersResponse) Reset()                    { *m = GroupMembersResponse{} }
func (m *GroupMembersResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupMembersResponse) ProtoMessage()               {}
func (*GroupMembersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GroupMembersResponse) GetLastEntry() *LogEntry {
	if m != nil {
		return m.LastEntry
	}
	return nil
}

func (m *GroupMembersResponse) GetMembers() []*GroupMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *GroupMembersResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type PullGroupLogsResuest struct {
	Group uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Index uint64 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (m *PullGroupLogsResuest) Reset()                    { *m = PullGroupLogsResuest{} }
func (m *PullGroupLogsResuest) String() string            { return proto.CompactTextString(m) }
func (*PullGroupLogsResuest) ProtoMessage()               {}
func (*PullGroupLogsResuest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PullGroupLogsResuest) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *PullGroupLogsResuest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type LogEntries struct {
	Entries   []*LogEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	Signature []byte      `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *LogEntries) Reset()                    { *m = LogEntries{} }
func (m *LogEntries) String() string            { return proto.CompactTextString(m) }
func (*LogEntries) ProtoMessage()               {}
func (*LogEntries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *LogEntries) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *LogEntries) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type NodeJoinGroupEntry struct {
	Group uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
}

func (m *NodeJoinGroupEntry) Reset()                    { *m = NodeJoinGroupEntry{} }
func (m *NodeJoinGroupEntry) String() string            { return proto.CompactTextString(m) }
func (*NodeJoinGroupEntry) ProtoMessage()               {}
func (*NodeJoinGroupEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *NodeJoinGroupEntry) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

type GroupLeader struct {
	Node      *Host  `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Accuate   bool   `protobuf:"varint,2,opt,name=Accuate" json:"Accuate,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *GroupLeader) Reset()                    { *m = GroupLeader{} }
func (m *GroupLeader) String() string            { return proto.CompactTextString(m) }
func (*GroupLeader) ProtoMessage()               {}
func (*GroupLeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GroupLeader) GetNode() *Host {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *GroupLeader) GetAccuate() bool {
	if m != nil {
		return m.Accuate
	}
	return false
}

func (m *GroupLeader) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type GroupInvitation struct {
	Group     uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Leader    uint64 `protobuf:"varint,2,opt,name=leader" json:"leader,omitempty"`
	Node      uint64 `protobuf:"varint,3,opt,name=node" json:"node,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *GroupInvitation) Reset()                    { *m = GroupInvitation{} }
func (m *GroupInvitation) String() string            { return proto.CompactTextString(m) }
func (*GroupInvitation) ProtoMessage()               {}
func (*GroupInvitation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GroupInvitation) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *GroupInvitation) GetLeader() uint64 {
	if m != nil {
		return m.Leader
	}
	return 0
}

func (m *GroupInvitation) GetNode() uint64 {
	if m != nil {
		return m.Node
	}
	return 0
}

func (m *GroupInvitation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type RaftGroupNodes struct {
	Nodes []*Host `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *RaftGroupNodes) Reset()                    { *m = RaftGroupNodes{} }
func (m *RaftGroupNodes) String() string            { return proto.CompactTextString(m) }
func (*RaftGroupNodes) ProtoMessage()               {}
func (*RaftGroupNodes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RaftGroupNodes) GetNodes() []*Host {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Nothing struct {
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func init() {
	proto.RegisterType((*CommandRequest)(nil), "server.CommandRequest")
	proto.RegisterType((*CommandResponse)(nil), "server.CommandResponse")
	proto.RegisterType((*LogEntry)(nil), "server.LogEntry")
	proto.RegisterType((*RequestVoteRequest)(nil), "server.RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "server.RequestVoteResponse")
	proto.RegisterType((*AppendEntriesRequest)(nil), "server.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesResponse)(nil), "server.AppendEntriesResponse")
	proto.RegisterType((*Peer)(nil), "server.Peer")
	proto.RegisterType((*Host)(nil), "server.Host")
	proto.RegisterType((*RaftGroup)(nil), "server.RaftGroup")
	proto.RegisterType((*ServerConfig)(nil), "server.ServerConfig")
	proto.RegisterType((*ApproveAppendResponse)(nil), "server.ApproveAppendResponse")
	proto.RegisterType((*GroupId)(nil), "server.GroupId")
	proto.RegisterType((*GroupNodesResponse)(nil), "server.GroupNodesResponse")
	proto.RegisterType((*GroupMember)(nil), "server.GroupMember")
	proto.RegisterType((*GroupMembersResponse)(nil), "server.GroupMembersResponse")
	proto.RegisterType((*PullGroupLogsResuest)(nil), "server.PullGroupLogsResuest")
	proto.RegisterType((*LogEntries)(nil), "server.LogEntries")
	proto.RegisterType((*NodeJoinGroupEntry)(nil), "server.NodeJoinGroupEntry")
	proto.RegisterType((*GroupLeader)(nil), "server.GroupLeader")
	proto.RegisterType((*GroupInvitation)(nil), "server.GroupInvitation")
	proto.RegisterType((*RaftGroupNodes)(nil), "server.RaftGroupNodes")
	proto.RegisterType((*Nothing)(nil), "server.Nothing")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BFTRaft service

type BFTRaftClient interface {
	ExecCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	ApproveAppend(ctx context.Context, in *AppendEntriesResponse, opts ...grpc.CallOption) (*ApproveAppendResponse, error)
	GroupHosts(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*GroupNodesResponse, error)
	GroupMembers(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*GroupMembersResponse, error)
	GetGroupLeader(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*GroupLeader, error)
	GetGroupContent(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*RaftGroup, error)
	PullGroupLogs(ctx context.Context, in *PullGroupLogsResuest, opts ...grpc.CallOption) (*LogEntries, error)
	SendGroupInvitation(ctx context.Context, in *GroupInvitation, opts ...grpc.CallOption) (*Nothing, error)
}

type bFTRaftClient struct {
	cc *grpc.ClientConn
}

func NewBFTRaftClient(cc *grpc.ClientConn) BFTRaftClient {
	return &bFTRaftClient{cc}
}

func (c *bFTRaftClient) ExecCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := grpc.Invoke(ctx, "/server.BFTRaft/ExecCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFTRaftClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := grpc.Invoke(ctx, "/server.BFTRaft/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFTRaftClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := grpc.Invoke(ctx, "/server.BFTRaft/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFTRaftClient) ApproveAppend(ctx context.Context, in *AppendEntriesResponse, opts ...grpc.CallOption) (*ApproveAppendResponse, error) {
	out := new(ApproveAppendResponse)
	err := grpc.Invoke(ctx, "/server.BFTRaft/ApproveAppend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFTRaftClient) GroupHosts(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*GroupNodesResponse, error) {
	out := new(GroupNodesResponse)
	err := grpc.Invoke(ctx, "/server.BFTRaft/GroupHosts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFTRaftClient) GroupMembers(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*GroupMembersResponse, error) {
	out := new(GroupMembersResponse)
	err := grpc.Invoke(ctx, "/server.BFTRaft/GroupMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFTRaftClient) GetGroupLeader(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*GroupLeader, error) {
	out := new(GroupLeader)
	err := grpc.Invoke(ctx, "/server.BFTRaft/GetGroupLeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFTRaftClient) GetGroupContent(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*RaftGroup, error) {
	out := new(RaftGroup)
	err := grpc.Invoke(ctx, "/server.BFTRaft/GetGroupContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFTRaftClient) PullGroupLogs(ctx context.Context, in *PullGroupLogsResuest, opts ...grpc.CallOption) (*LogEntries, error) {
	out := new(LogEntries)
	err := grpc.Invoke(ctx, "/server.BFTRaft/PullGroupLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFTRaftClient) SendGroupInvitation(ctx context.Context, in *GroupInvitation, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/server.BFTRaft/SendGroupInvitation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BFTRaft service

type BFTRaftServer interface {
	ExecCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	ApproveAppend(context.Context, *AppendEntriesResponse) (*ApproveAppendResponse, error)
	GroupHosts(context.Context, *GroupId) (*GroupNodesResponse, error)
	GroupMembers(context.Context, *GroupId) (*GroupMembersResponse, error)
	GetGroupLeader(context.Context, *GroupId) (*GroupLeader, error)
	GetGroupContent(context.Context, *GroupId) (*RaftGroup, error)
	PullGroupLogs(context.Context, *PullGroupLogsResuest) (*LogEntries, error)
	SendGroupInvitation(context.Context, *GroupInvitation) (*Nothing, error)
}

func RegisterBFTRaftServer(s *grpc.Server, srv BFTRaftServer) {
	s.RegisterService(&_BFTRaft_serviceDesc, srv)
}

func _BFTRaft_ExecCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTRaftServer).ExecCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.BFTRaft/ExecCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTRaftServer).ExecCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFTRaft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTRaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.BFTRaft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTRaftServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFTRaft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTRaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.BFTRaft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTRaftServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFTRaft_ApproveAppend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTRaftServer).ApproveAppend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.BFTRaft/ApproveAppend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTRaftServer).ApproveAppend(ctx, req.(*AppendEntriesResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFTRaft_GroupHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTRaftServer).GroupHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.BFTRaft/GroupHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTRaftServer).GroupHosts(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFTRaft_GroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTRaftServer).GroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.BFTRaft/GroupMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTRaftServer).GroupMembers(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFTRaft_GetGroupLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTRaftServer).GetGroupLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.BFTRaft/GetGroupLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTRaftServer).GetGroupLeader(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFTRaft_GetGroupContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTRaftServer).GetGroupContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.BFTRaft/GetGroupContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTRaftServer).GetGroupContent(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFTRaft_PullGroupLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullGroupLogsResuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTRaftServer).PullGroupLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.BFTRaft/PullGroupLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTRaftServer).PullGroupLogs(ctx, req.(*PullGroupLogsResuest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFTRaft_SendGroupInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInvitation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTRaftServer).SendGroupInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.BFTRaft/SendGroupInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTRaftServer).SendGroupInvitation(ctx, req.(*GroupInvitation))
	}
	return interceptor(ctx, in, info, handler)
}

var _BFTRaft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.BFTRaft",
	HandlerType: (*BFTRaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecCommand",
			Handler:    _BFTRaft_ExecCommand_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _BFTRaft_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _BFTRaft_AppendEntries_Handler,
		},
		{
			MethodName: "ApproveAppend",
			Handler:    _BFTRaft_ApproveAppend_Handler,
		},
		{
			MethodName: "GroupHosts",
			Handler:    _BFTRaft_GroupHosts_Handler,
		},
		{
			MethodName: "GroupMembers",
			Handler:    _BFTRaft_GroupMembers_Handler,
		},
		{
			MethodName: "GetGroupLeader",
			Handler:    _BFTRaft_GetGroupLeader_Handler,
		},
		{
			MethodName: "GetGroupContent",
			Handler:    _BFTRaft_GetGroupContent_Handler,
		},
		{
			MethodName: "PullGroupLogs",
			Handler:    _BFTRaft_PullGroupLogs_Handler,
		},
		{
			MethodName: "SendGroupInvitation",
			Handler:    _BFTRaft_SendGroupInvitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server/server.proto",
}

func init() { proto.RegisterFile("proto/server/server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcf, 0x6e, 0x23, 0xc5,
	0x13, 0xf6, 0xf8, 0xdf, 0xd8, 0x65, 0x27, 0xd9, 0x5f, 0x6f, 0x7e, 0x1b, 0xaf, 0x37, 0x2b, 0x4c,
	0x6b, 0x0f, 0xd1, 0x4a, 0x6c, 0x50, 0x40, 0x02, 0x09, 0x09, 0xc8, 0x46, 0xcb, 0xae, 0x21, 0x84,
	0x65, 0xb2, 0xca, 0xd5, 0x9a, 0x4c, 0x77, 0x26, 0x23, 0xec, 0x6e, 0x67, 0xa6, 0x6d, 0x25, 0x9c,
	0xb8, 0x73, 0xe5, 0x2d, 0x38, 0x20, 0xb8, 0xf0, 0x00, 0x9c, 0x79, 0x00, 0xde, 0x06, 0x75, 0x75,
	0xcf, 0x78, 0x66, 0xec, 0x38, 0xbb, 0x9c, 0xd2, 0x55, 0xdd, 0x5d, 0xf3, 0x55, 0x7d, 0x5f, 0x55,
	0x3b, 0xf0, 0x70, 0x1a, 0x4b, 0x25, 0xf7, 0x13, 0x1e, 0xcf, 0x79, 0x6c, 0xff, 0x3c, 0x43, 0x1f,
	0x69, 0x1a, 0x8b, 0xfe, 0xea, 0xc0, 0xe6, 0x91, 0x9c, 0x4c, 0x7c, 0xc1, 0x3c, 0x7e, 0x35, 0xe3,
	0x89, 0x22, 0xdb, 0xd0, 0x08, 0x63, 0x39, 0x9b, 0xf6, 0x9c, 0x81, 0xb3, 0x57, 0xf7, 0x8c, 0x41,
	0x1e, 0x41, 0x3b, 0x18, 0x47, 0x5c, 0xa8, 0x51, 0xc4, 0x7a, 0x55, 0xdc, 0x69, 0x19, 0xc7, 0x90,
	0x91, 0xc7, 0x00, 0xb1, 0xb9, 0xad, 0x77, 0x6b, 0xb8, 0xdb, 0xb6, 0x9e, 0x21, 0x23, 0x3b, 0xe0,
	0x5e, 0xcc, 0x44, 0xa0, 0xf7, 0xea, 0xb8, 0xd7, 0xd4, 0xe6, 0x90, 0x91, 0x5d, 0x68, 0x27, 0x51,
	0x28, 0x7c, 0x35, 0x8b, 0x79, 0xaf, 0x31, 0x70, 0xf6, 0xba, 0xde, 0xc2, 0x41, 0xee, 0x41, 0xcd,
	0x8f, 0xc3, 0x5e, 0x13, 0xfd, 0x7a, 0x49, 0xff, 0x70, 0x60, 0x2b, 0x43, 0x9b, 0x4c, 0xa5, 0x48,
	0xf8, 0xed, 0x70, 0xc7, 0xdc, 0x67, 0x3c, 0xce, 0xc1, 0x35, 0x0e, 0x83, 0x47, 0x48, 0xc6, 0x17,
	0x58, 0x9b, 0xda, 0x5c, 0xca, 0xa3, 0x5e, 0xce, 0x63, 0x3d, 0xdc, 0x07, 0xd0, 0x8c, 0x79, 0x32,
	0x1b, 0x2b, 0x8b, 0xd8, 0x5a, 0xf4, 0x47, 0x68, 0x1d, 0xcb, 0xf0, 0x85, 0x50, 0xf1, 0x0d, 0x21,
	0x50, 0x57, 0x3c, 0x9e, 0x58, 0xac, 0xb8, 0xd6, 0x09, 0x44, 0x82, 0xf1, 0x6b, 0x0b, 0xd3, 0x18,
	0xfa, 0xe4, 0xa5, 0x9f, 0x5c, 0x22, 0xc0, 0xae, 0x87, 0x6b, 0xf2, 0x21, 0xb8, 0x81, 0xc9, 0x1e,
	0xb1, 0x75, 0x0e, 0x1e, 0x3c, 0xb3, 0xa4, 0x16, 0x29, 0xf4, 0xd2, 0x63, 0xf4, 0x4f, 0x07, 0x88,
	0x75, 0x9e, 0x49, 0xc5, 0xd7, 0x53, 0x9c, 0x82, 0xab, 0xe6, 0xc0, 0xe9, 0x3a, 0xca, 0x70, 0x64,
	0x00, 0xd6, 0x6c, 0x1d, 0x65, 0x38, 0x44, 0x8c, 0x0f, 0x41, 0xaf, 0x47, 0x78, 0xc9, 0x14, 0xcb,
	0x1d, 0xcb, 0xf0, 0x8d, 0xbe, 0xf7, 0x3e, 0x74, 0x03, 0x5f, 0xb0, 0x88, 0xf9, 0x0a, 0xeb, 0xdc,
	0xc0, 0xed, 0x4e, 0xe6, 0x2b, 0x57, 0xb3, 0x59, 0xaa, 0x26, 0xfd, 0xdb, 0x81, 0xfb, 0x05, 0xe4,
	0x6b, 0xe9, 0x7e, 0x67, 0xe8, 0x6f, 0x81, 0x6f, 0x1b, 0x1a, 0x73, 0xa9, 0x78, 0x8c, 0xd8, 0xea,
	0x9e, 0x31, 0x48, 0x0f, 0xdc, 0x30, 0xf6, 0x85, 0xe2, 0xac, 0xe7, 0x0e, 0x9c, 0xbd, 0x96, 0x97,
	0x9a, 0xc5, 0x7c, 0x5a, 0xe5, 0x7c, 0x7e, 0xaf, 0xc2, 0xf6, 0xe1, 0x74, 0xca, 0x05, 0xd3, 0x4a,
	0x88, 0x78, 0xf2, 0xdf, 0xb8, 0xc8, 0x34, 0x5d, 0x2b, 0x69, 0xfa, 0x09, 0x6c, 0x4e, 0x63, 0x3e,
	0x1f, 0x2d, 0x52, 0x36, 0x8c, 0x74, 0xb5, 0xf7, 0x38, 0x4d, 0x9b, 0xc2, 0x46, 0x76, 0x0a, 0xe3,
	0xdb, 0xbc, 0xed, 0x21, 0xa4, 0x6e, 0x2d, 0x2f, 0xe4, 0x73, 0xe8, 0x5e, 0xcd, 0x64, 0x3c, 0x9b,
	0x8c, 0x74, 0x3d, 0x92, 0x9e, 0x3b, 0xa8, 0xed, 0x75, 0x0e, 0x1e, 0xa5, 0x42, 0x5c, 0x41, 0x99,
	0xd7, 0x31, 0x17, 0xb4, 0x2f, 0x21, 0x4f, 0xc1, 0xe5, 0xa6, 0x00, 0xbd, 0x16, 0x5e, 0xbd, 0x97,
	0x5e, 0x4d, 0x9b, 0xc4, 0x4b, 0x0f, 0xd0, 0x7f, 0x1c, 0xf8, 0x7f, 0xa9, 0x66, 0xef, 0xac, 0x82,
	0xac, 0xbb, 0x6a, 0xa5, 0xee, 0x9a, 0x72, 0x1e, 0xdb, 0x1a, 0xe1, 0x1a, 0xf3, 0x9e, 0x05, 0x01,
	0x4f, 0x12, 0x6e, 0xf4, 0xd0, 0xf2, 0x16, 0x0e, 0xbd, 0x1b, 0x48, 0x31, 0x8f, 0x44, 0xc0, 0x19,
	0x56, 0xa5, 0xe5, 0x2d, 0x1c, 0x59, 0xb7, 0xba, 0xb9, 0x6e, 0x5d, 0xaf, 0x87, 0x9f, 0x1c, 0xa8,
	0xbf, 0xd6, 0x9f, 0xdd, 0x84, 0x6a, 0xc4, 0x6c, 0x1e, 0xd5, 0x88, 0x2d, 0x52, 0xab, 0x96, 0x52,
	0xbb, 0x94, 0x89, 0xb2, 0x59, 0xe0, 0x5a, 0x4f, 0x2b, 0xc1, 0xaf, 0x55, 0x81, 0xee, 0xb6, 0xf6,
	0x18, 0xae, 0xdf, 0x83, 0xce, 0xc4, 0x57, 0xc1, 0xa5, 0xdd, 0x37, 0x4c, 0x03, 0xba, 0xf0, 0x00,
	0xfd, 0xd9, 0x81, 0xfa, 0x2b, 0x1d, 0xa8, 0x0c, 0x41, 0x0b, 0xcd, 0x4f, 0xd4, 0x28, 0xe1, 0x5c,
	0x64, 0xc3, 0xd3, 0x4f, 0xd4, 0x29, 0xe7, 0x42, 0x8f, 0x39, 0x29, 0xc6, 0x91, 0xe0, 0x88, 0xa5,
	0xe5, 0x59, 0x4b, 0x7f, 0xce, 0x10, 0x39, 0xf2, 0x19, 0x33, 0x95, 0x6d, 0x7b, 0x60, 0x5c, 0x87,
	0x8c, 0xc5, 0x1a, 0xee, 0x74, 0x76, 0x3e, 0x8e, 0x82, 0xd1, 0x0f, 0xfc, 0x26, 0x1d, 0x9f, 0xc6,
	0xf3, 0x0d, 0xbf, 0xa1, 0xa7, 0xd0, 0xf6, 0xfc, 0x0b, 0xf5, 0x12, 0xd3, 0xa5, 0xd0, 0x8d, 0xf9,
	0x74, 0x1c, 0x05, 0xbe, 0x8a, 0xa4, 0x48, 0x10, 0xdb, 0x86, 0x57, 0xf0, 0x59, 0xd4, 0xd5, 0x0c,
	0x75, 0xca, 0x7e, 0x7d, 0xc1, 0x3e, 0xdd, 0x87, 0xee, 0x29, 0x22, 0x38, 0x92, 0xe2, 0x22, 0x0a,
	0x35, 0xc8, 0x69, 0x1c, 0xcd, 0x75, 0xd3, 0x6b, 0x10, 0x0e, 0x82, 0x00, 0xeb, 0xd2, 0x28, 0xfe,
	0x32, 0x92, 0x8b, 0xe5, 0x9c, 0x1b, 0xe5, 0xdd, 0x2d, 0x39, 0x14, 0x52, 0x35, 0x27, 0xa4, 0xd5,
	0x92, 0xeb, 0x43, 0xcb, 0xc7, 0x88, 0xdc, 0x4c, 0xef, 0x96, 0x97, 0xd9, 0x7a, 0xa8, 0x30, 0x3e,
	0xf6, 0x6f, 0x32, 0xe1, 0xa5, 0xa6, 0xae, 0xf6, 0x85, 0x1f, 0x8d, 0x33, 0xcd, 0x59, 0xab, 0x28,
	0x2e, 0xb7, 0x2c, 0xae, 0x27, 0xe0, 0x62, 0x1d, 0x87, 0x4c, 0xcf, 0x68, 0x44, 0x3a, 0xca, 0x18,
	0x76, 0x43, 0xb3, 0x45, 0xcf, 0x80, 0xe0, 0xa9, 0x13, 0xc9, 0x72, 0xad, 0x45, 0xa1, 0xa1, 0x5f,
	0x43, 0x5d, 0x73, 0xdd, 0x9e, 0xdd, 0xb4, 0x3d, 0xb5, 0x52, 0x3c, 0xb3, 0x55, 0xfc, 0x7a, 0xb5,
	0xfc, 0xf5, 0xef, 0xa1, 0x83, 0x71, 0xbf, 0xe5, 0x93, 0x73, 0x1e, 0x93, 0x81, 0x95, 0xae, 0x83,
	0x4f, 0x56, 0x31, 0x9e, 0x11, 0xf2, 0x20, 0x57, 0xc4, 0xdc, 0x09, 0xdd, 0x1e, 0xa6, 0xa4, 0xf4,
	0x17, 0x07, 0xb6, 0x73, 0x31, 0x17, 0x68, 0xf7, 0x01, 0x50, 0xaa, 0x7a, 0x64, 0xdc, 0xd8, 0x00,
	0xcb, 0x13, 0x05, 0xe5, 0x6c, 0x5e, 0xe0, 0x0f, 0xc0, 0x9d, 0x98, 0x18, 0xbd, 0x1a, 0x26, 0x78,
	0x3f, 0x3d, 0x9d, 0x8b, 0xef, 0xa5, 0x67, 0x8a, 0x99, 0xd6, 0xcb, 0x99, 0x3e, 0x87, 0xed, 0xd7,
	0xb3, 0xf1, 0x18, 0x6f, 0x1e, 0xcb, 0x50, 0xc3, 0x5a, 0x33, 0xd3, 0x57, 0x3e, 0xf4, 0xf4, 0x0c,
	0xc0, 0xe2, 0x8c, 0x8a, 0xe3, 0xd1, 0xb9, 0x63, 0x3c, 0xde, 0xc1, 0xc2, 0x53, 0x20, 0x9a, 0xd8,
	0xaf, 0x65, 0x24, 0x10, 0x9f, 0x49, 0x7f, 0x25, 0x32, 0x1a, 0x5a, 0xc6, 0x8e, 0xf1, 0x35, 0xd1,
	0x7c, 0x68, 0x9e, 0x57, 0x33, 0xa6, 0x77, 0xb4, 0x60, 0x0f, 0x83, 0x60, 0xe6, 0x2b, 0xf3, 0xe1,
	0x96, 0x97, 0x9a, 0x45, 0x50, 0xb5, 0x32, 0xa8, 0x2b, 0xd8, 0x32, 0xc2, 0x14, 0xf3, 0x48, 0x61,
	0x1f, 0xdf, 0x52, 0xab, 0x07, 0xd0, 0x34, 0x4f, 0x9b, 0x2d, 0x96, 0xb5, 0x74, 0xbf, 0x21, 0x34,
	0x3b, 0x07, 0x11, 0xcc, 0x7a, 0x8e, 0x3e, 0x86, 0xcd, 0x6c, 0xae, 0xa0, 0xd2, 0xdf, 0x46, 0xe1,
	0xb4, 0x0d, 0xee, 0x89, 0x54, 0x97, 0x91, 0x08, 0x0f, 0x7e, 0x6b, 0x80, 0xfb, 0xfc, 0xab, 0x37,
	0x3a, 0x08, 0xf9, 0x12, 0x3a, 0x2f, 0xae, 0x79, 0x60, 0x7f, 0x6e, 0x91, 0x5b, 0x7e, 0x7f, 0xf5,
	0x77, 0x96, 0xfc, 0x46, 0xae, 0xb4, 0x42, 0x5e, 0x41, 0x27, 0xf7, 0x46, 0x92, 0xfe, 0xca, 0x87,
	0xd3, 0x44, 0x59, 0xf7, 0xa8, 0xd2, 0x0a, 0x39, 0x81, 0x8d, 0xc2, 0xe3, 0x48, 0x76, 0xd3, 0xf3,
	0xab, 0x7e, 0x67, 0xf4, 0x1f, 0xdf, 0xb2, 0x9b, 0xc5, 0xfb, 0x0e, 0xe3, 0x2d, 0x26, 0x1f, 0x59,
	0x7f, 0xa3, 0x10, 0x70, 0x79, 0x5e, 0xd2, 0x0a, 0xf9, 0x0c, 0x00, 0xab, 0xae, 0xeb, 0x9a, 0x90,
	0xad, 0x42, 0x9f, 0x0d, 0x59, 0xbf, 0x5f, 0x70, 0x14, 0x86, 0x10, 0xad, 0x90, 0x2f, 0xa0, 0x9b,
	0x6f, 0xf8, 0xe5, 0xeb, 0xbb, 0x2b, 0xfa, 0x36, 0x1f, 0xe0, 0x53, 0xd8, 0x7c, 0xc9, 0x55, 0x5e,
	0xd6, 0x4b, 0x21, 0x8a, 0xad, 0x6f, 0x4e, 0xd1, 0x0a, 0xf9, 0x04, 0xb6, 0xd2, 0x9b, 0x47, 0x52,
	0x28, 0x2e, 0xd4, 0xf2, 0xd5, 0xff, 0x65, 0xdc, 0xa4, 0xda, 0xa2, 0x15, 0x72, 0x04, 0x1b, 0x85,
	0x71, 0xb0, 0x60, 0x64, 0xd5, 0x94, 0xe8, 0x93, 0x52, 0x6b, 0xeb, 0x9f, 0x3c, 0x15, 0x72, 0x08,
	0xf7, 0x4f, 0xb9, 0x60, 0xe5, 0x36, 0xd9, 0x29, 0x22, 0xc8, 0x36, 0xfa, 0x19, 0x34, 0xab, 0x57,
	0x5a, 0x39, 0x6f, 0xe2, 0xff, 0x78, 0x1f, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x43, 0x29, 0x3a,
	0x67, 0x00, 0x0e, 0x00, 0x00,
}
